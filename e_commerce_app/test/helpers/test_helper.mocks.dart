// Mocks generated by Mockito 5.4.4 from annotations
// in e_commerce_app/test/helpers/test_helper.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i7;
import 'dart:convert' as _i12;
import 'dart:typed_data' as _i14;

import 'package:dartz/dartz.dart' as _i2;
import 'package:e_commerce_app/core/errors/failures.dart' as _i8;
import 'package:e_commerce_app/features/product/data/data_sources/remote/remote_data_source.dart'
    as _i5;
import 'package:e_commerce_app/features/product/data/models/product_model.dart'
    as _i4;
import 'package:e_commerce_app/features/product/data/repositories/product_repository_impl.dart'
    as _i11;
import 'package:e_commerce_app/features/product/domain/entities/product.dart'
    as _i9;
import 'package:e_commerce_app/features/product/domain/repositories/product_repository.dart'
    as _i3;
import 'package:e_commerce_app/features/product/domain/usecases/get_product.dart'
    as _i10;
import 'package:http/http.dart' as _i6;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i13;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeProductRepository_1 extends _i1.SmartFake
    implements _i3.ProductRepository {
  _FakeProductRepository_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeProductModel_2 extends _i1.SmartFake implements _i4.ProductModel {
  _FakeProductModel_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeRemoteDataSource_3 extends _i1.SmartFake
    implements _i5.RemoteDataSource {
  _FakeRemoteDataSource_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeResponse_4 extends _i1.SmartFake implements _i6.Response {
  _FakeResponse_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeStreamedResponse_5 extends _i1.SmartFake
    implements _i6.StreamedResponse {
  _FakeStreamedResponse_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ProductRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockProductRepository extends _i1.Mock implements _i3.ProductRepository {
  MockProductRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<_i2.Either<_i8.Failure, _i9.Product>> getProduct(
          String? productid) =>
      (super.noSuchMethod(
        Invocation.method(
          #getProduct,
          [productid],
        ),
        returnValue: _i7.Future<_i2.Either<_i8.Failure, _i9.Product>>.value(
            _FakeEither_0<_i8.Failure, _i9.Product>(
          this,
          Invocation.method(
            #getProduct,
            [productid],
          ),
        )),
      ) as _i7.Future<_i2.Either<_i8.Failure, _i9.Product>>);

  @override
  _i7.Future<_i2.Either<_i8.Failure, void>> insertProduct(
          _i9.Product? product) =>
      (super.noSuchMethod(
        Invocation.method(
          #insertProduct,
          [product],
        ),
        returnValue: _i7.Future<_i2.Either<_i8.Failure, void>>.value(
            _FakeEither_0<_i8.Failure, void>(
          this,
          Invocation.method(
            #insertProduct,
            [product],
          ),
        )),
      ) as _i7.Future<_i2.Either<_i8.Failure, void>>);

  @override
  _i7.Future<_i2.Either<_i8.Failure, void>> updateProduct(
          _i9.Product? product) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateProduct,
          [product],
        ),
        returnValue: _i7.Future<_i2.Either<_i8.Failure, void>>.value(
            _FakeEither_0<_i8.Failure, void>(
          this,
          Invocation.method(
            #updateProduct,
            [product],
          ),
        )),
      ) as _i7.Future<_i2.Either<_i8.Failure, void>>);

  @override
  _i7.Future<_i2.Either<_i8.Failure, void>> deleteProduct(String? productid) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteProduct,
          [productid],
        ),
        returnValue: _i7.Future<_i2.Either<_i8.Failure, void>>.value(
            _FakeEither_0<_i8.Failure, void>(
          this,
          Invocation.method(
            #deleteProduct,
            [productid],
          ),
        )),
      ) as _i7.Future<_i2.Either<_i8.Failure, void>>);
}

/// A class which mocks [GetProductUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetProductUseCase extends _i1.Mock implements _i10.GetProductUseCase {
  MockGetProductUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.ProductRepository get productRepository => (super.noSuchMethod(
        Invocation.getter(#productRepository),
        returnValue: _FakeProductRepository_1(
          this,
          Invocation.getter(#productRepository),
        ),
      ) as _i3.ProductRepository);

  @override
  _i7.Future<_i2.Either<_i8.Failure, _i9.Product>> execute(String? productid) =>
      (super.noSuchMethod(
        Invocation.method(
          #execute,
          [productid],
        ),
        returnValue: _i7.Future<_i2.Either<_i8.Failure, _i9.Product>>.value(
            _FakeEither_0<_i8.Failure, _i9.Product>(
          this,
          Invocation.method(
            #execute,
            [productid],
          ),
        )),
      ) as _i7.Future<_i2.Either<_i8.Failure, _i9.Product>>);
}

/// A class which mocks [RemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockRemoteDataSource extends _i1.Mock implements _i5.RemoteDataSource {
  MockRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<void> deleteProduct(String? productid) => (super.noSuchMethod(
        Invocation.method(
          #deleteProduct,
          [productid],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<_i4.ProductModel> getProductById(String? productid) =>
      (super.noSuchMethod(
        Invocation.method(
          #getProductById,
          [productid],
        ),
        returnValue: _i7.Future<_i4.ProductModel>.value(_FakeProductModel_2(
          this,
          Invocation.method(
            #getProductById,
            [productid],
          ),
        )),
      ) as _i7.Future<_i4.ProductModel>);

  @override
  _i7.Future<void> insertProduct(_i9.Product? product) => (super.noSuchMethod(
        Invocation.method(
          #insertProduct,
          [product],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> updateProduct(_i9.Product? product) => (super.noSuchMethod(
        Invocation.method(
          #updateProduct,
          [product],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);
}

/// A class which mocks [ProductRepositoryImpl].
///
/// See the documentation for Mockito's code generation for more information.
class MockProductRepositoryImpl extends _i1.Mock
    implements _i11.ProductRepositoryImpl {
  MockProductRepositoryImpl() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.RemoteDataSource get remoteDataSource => (super.noSuchMethod(
        Invocation.getter(#remoteDataSource),
        returnValue: _FakeRemoteDataSource_3(
          this,
          Invocation.getter(#remoteDataSource),
        ),
      ) as _i5.RemoteDataSource);

  @override
  set remoteDataSource(_i5.RemoteDataSource? _remoteDataSource) =>
      super.noSuchMethod(
        Invocation.setter(
          #remoteDataSource,
          _remoteDataSource,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i7.Future<_i2.Either<_i8.Failure, void>> deleteProduct(String? productid) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteProduct,
          [productid],
        ),
        returnValue: _i7.Future<_i2.Either<_i8.Failure, void>>.value(
            _FakeEither_0<_i8.Failure, void>(
          this,
          Invocation.method(
            #deleteProduct,
            [productid],
          ),
        )),
      ) as _i7.Future<_i2.Either<_i8.Failure, void>>);

  @override
  _i7.Future<_i2.Either<_i8.Failure, _i9.Product>> getProduct(
          String? productid) =>
      (super.noSuchMethod(
        Invocation.method(
          #getProduct,
          [productid],
        ),
        returnValue: _i7.Future<_i2.Either<_i8.Failure, _i9.Product>>.value(
            _FakeEither_0<_i8.Failure, _i9.Product>(
          this,
          Invocation.method(
            #getProduct,
            [productid],
          ),
        )),
      ) as _i7.Future<_i2.Either<_i8.Failure, _i9.Product>>);

  @override
  _i7.Future<_i2.Either<_i8.Failure, void>> insertProduct(
          _i9.Product? product) =>
      (super.noSuchMethod(
        Invocation.method(
          #insertProduct,
          [product],
        ),
        returnValue: _i7.Future<_i2.Either<_i8.Failure, void>>.value(
            _FakeEither_0<_i8.Failure, void>(
          this,
          Invocation.method(
            #insertProduct,
            [product],
          ),
        )),
      ) as _i7.Future<_i2.Either<_i8.Failure, void>>);

  @override
  _i7.Future<_i2.Either<_i8.Failure, void>> updateProduct(
          _i9.Product? product) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateProduct,
          [product],
        ),
        returnValue: _i7.Future<_i2.Either<_i8.Failure, void>>.value(
            _FakeEither_0<_i8.Failure, void>(
          this,
          Invocation.method(
            #updateProduct,
            [product],
          ),
        )),
      ) as _i7.Future<_i2.Either<_i8.Failure, void>>);
}

/// A class which mocks [Client].
///
/// See the documentation for Mockito's code generation for more information.
class MockHttpClient extends _i1.Mock implements _i6.Client {
  MockHttpClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<_i6.Response> head(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #head,
          [url],
          {#headers: headers},
        ),
        returnValue: _i7.Future<_i6.Response>.value(_FakeResponse_4(
          this,
          Invocation.method(
            #head,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i7.Future<_i6.Response>);

  @override
  _i7.Future<_i6.Response> get(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #get,
          [url],
          {#headers: headers},
        ),
        returnValue: _i7.Future<_i6.Response>.value(_FakeResponse_4(
          this,
          Invocation.method(
            #get,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i7.Future<_i6.Response>);

  @override
  _i7.Future<_i6.Response> post(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i12.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #post,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i7.Future<_i6.Response>.value(_FakeResponse_4(
          this,
          Invocation.method(
            #post,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i7.Future<_i6.Response>);

  @override
  _i7.Future<_i6.Response> put(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i12.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #put,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i7.Future<_i6.Response>.value(_FakeResponse_4(
          this,
          Invocation.method(
            #put,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i7.Future<_i6.Response>);

  @override
  _i7.Future<_i6.Response> patch(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i12.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #patch,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i7.Future<_i6.Response>.value(_FakeResponse_4(
          this,
          Invocation.method(
            #patch,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i7.Future<_i6.Response>);

  @override
  _i7.Future<_i6.Response> delete(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i12.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #delete,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i7.Future<_i6.Response>.value(_FakeResponse_4(
          this,
          Invocation.method(
            #delete,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i7.Future<_i6.Response>);

  @override
  _i7.Future<String> read(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #read,
          [url],
          {#headers: headers},
        ),
        returnValue: _i7.Future<String>.value(_i13.dummyValue<String>(
          this,
          Invocation.method(
            #read,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i7.Future<String>);

  @override
  _i7.Future<_i14.Uint8List> readBytes(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #readBytes,
          [url],
          {#headers: headers},
        ),
        returnValue: _i7.Future<_i14.Uint8List>.value(_i14.Uint8List(0)),
      ) as _i7.Future<_i14.Uint8List>);

  @override
  _i7.Future<_i6.StreamedResponse> send(_i6.BaseRequest? request) =>
      (super.noSuchMethod(
        Invocation.method(
          #send,
          [request],
        ),
        returnValue:
            _i7.Future<_i6.StreamedResponse>.value(_FakeStreamedResponse_5(
          this,
          Invocation.method(
            #send,
            [request],
          ),
        )),
      ) as _i7.Future<_i6.StreamedResponse>);

  @override
  void close() => super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
